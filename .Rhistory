visualize(null_distribution_movies_median, bins = 10) +
shade_p_value(obs_stat = obs_diff_medians, direction = "both")
# p-value is very small, just like when we used "diff in means"
# as the test statistic.
null_distribution_movies_median %>%
get_p_value(obs_stat = obs_diff_medians, direction = "both")
?facet_grid
?facet_wrap
ggplot(data = movies_sample, aes(x = rating)) +
geom_histogram() +
facet_wrap(vars(genre))+
labs(y = "IMDb rating")
ggplot(data = movies_sample, aes(x = rating)) +
geom_histogram(bins=5) +
facet_wrap(vars(genre))+
labs(y = "IMDb rating")
ggplot(data = movies_sample, aes(x = rating)) +
geom_histogram(bins=7) +
facet_wrap(vars(genre))+
labs(y = "IMDb rating")
ggplot(data = movies_sample, aes(x = rating)) +
geom_histogram(bins=10) +
facet_wrap(vars(genre))+
labs(y = "IMDb rating")
ggplot(data = movies_sample, aes(x = rating)) +
geom_histogram(bins=8) +
facet_wrap(vars(genre))+
labs(y = "IMDb rating")
ggplot(data = movies_sample, aes(x = rating)) +
geom_histogram(bins=8) +
facet_wrap(vars(genre))+
labs(x = "IMDb rating")
ggplot(data = movies_sample, aes(x = rating)) +
geom_density() +
facet_wrap(vars(genre))+
labs(x = "IMDb rating")
ggplot(data = movies_sample, aes(x = rating)) +
geom_density() +
facet_wrap(vars(genre))+
labs(x = "IMDb rating") +
theme_classic()
ggplot(data = movies_sample, aes(x = rating)) +
geom_density() +
facet_wrap(vars(genre))+
labs(x = "IMDb rating") +
theme_classic(fill="cyan")
ggplot(data = movies_sample, aes(x = rating)) +
geom_density(fill="cyan") +
facet_wrap(vars(genre))+
labs(x = "IMDb rating") +
theme_classic()
action_romance <- movies %>%
filter(Action == 1 & Romance == 1)
ggplot(action_romance, aes(rating)) +
geom_histogram() +
facet_wrap(~Action)
head(action_romance)
action_romance <- movies %>%
select(title,year,rating,votes,Action,Romance)
action_romance <- movies %>%
head(action_romance)
action_romance <- movies %>%
select(title,year,rating,votes,Action,Romance) %>%
# Get rid of movies that are both
filter(!(Action == 1 & Romance == 1)) %>%
filter(Action == 1 | Romance == 1)
head(action_romance)
action_romance <- movies %>%
select(title,year,rating,votes,Action,Romance) %>%
# Get rid of movies that are both
filter(!(Action == 1 & Romance == 1)) %>%
filter(Action == 1 | Romance == 1) %>%
mutate(genre = case_when(
Action == 1 ~ "Action",
Romance == 1 ~ "Romance",
TRUE ~ "Neither"
))
head(action_romance)
action_romance <- movies %>%
select(title,year,rating,votes,Action,Romance) %>%
# Get rid of movies that are both
filter(!(Action == 1 & Romance == 1)) %>%
filter(Action == 1 | Romance == 1) %>%
mutate(genre = case_when(
Action == 1 ~ "Action",
Romance == 1 ~ "Romance",
TRUE ~ "Neither"
)) %>%
select(-Action,-Romance)
head(action_romance)
action_sample %>%
group_by(genre) %>%
summarize(n = n(), mean_rating = mean(rating), std_dev = sd(rating))
action_romance %>%
group_by(genre) %>%
summarize(n = n(), mean_rating = mean(rating), std_dev = sd(rating))
ggplot(data = movies_sample, aes(x = rating)) +
geom_density(fill="cyan") +
facet_wrap(~genre)+
labs(x = "IMDb rating") +
theme_classic()
ggplot(data = movies_sample, aes(x = rating)) +
geom_histogram(bins=8) +
facet_wrap(~genre)+
labs(x = "IMDb rating")
ggplot(data = action_romance, aes(x = rating)) +
geom_histogram(bins=8) +
facet_wrap(~genre)+
labs(x = "IMDb rating")
ggplot(data = action_romance, aes(x = rating)) +
geom_density() +
facet_wrap(~genre)+
labs(x = "IMDb rating")
ggplot(data = action_romance, aes(x = rating)) +
geom_density() +
facet_wrap(~genre)+
labs(x = "IMDb rating") +
theme_classic()
ggplot(data = action_romance, aes(x = genre,y=rating)) +
geom_boxplot() +
labs(y = "IMDb rating")
ggplot(data = action_romance, aes(x = genre,y=rating)) +
geom_boxplot() +
labs(y = "IMDb rating") +
theme_classic()
set.seed(2511)
# In calculate() step replace "diff in means" with "diff in medians"
boot_distribution_movies_median <- movies_sample %>%
specify(formula = rating ~ genre) %>%
#  hypothesize(null = "independence") %>%
generate(reps = 1000, type = "bootstrap") %>%
calculate(stat = "diff in medians", order = c("Action", "Romance"))
visualize(null_distribution_movies_median, bins = 10)
visualize(boot_distribution_movies_median, bins = 10)
boot_distribution_movies_median %>%
get_ci(type="percentile")
boot_distribution_movies_median %>%
get_ci(level=.999,type="percentile")
library(knitr)
library(kableExtra)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(infer)
library(moderndive)
library(ggplot2movies)
?get_ci
nyflights
library(tidyverse)
library(infer)
library(moderndive)
library(nycflights13)
library(ggplot2movies)
head(flights)
carrier
airlines
library(knitr)
library(kableExtra)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(infer)
library(moderndive)
library(nycflights13)
library(ggplot2movies)
str(flights)
airlines
set.seed(90)
flights %>%
select(arr_delay, carrier) %>%
filter(carrier=="DL",carrier=="UA")
set.seed(90)
flights %>%
select(arr_delay, carrier)
set.seed(90)
flights %>%
select(arr_delay, carrier) %>%
filter(carrier=="DL",carrier=="UA")
set.seed(90)
flights %>%
select(arr_delay, carrier) %>%
dplyr::filter(carrier=="DL",carrier=="UA")
set.seed(90)
flights %>%
select(arr_delay, carrier) %>%
filter(carrier%in%c("DL","UA"))
?slice_min
?sample_n
set.seed(90)
flights %>%
select(arr_delay, carrier) %>%
filter(carrier%in%c("DL","UA")) %>%
group_by(carrier) %>%
slice_sample(n=50)
set.seed(90)
flights %>%
select(arr_delay, carrier,origin) %>%
filter(carrier%in%c("DL","UA")) %>%
group_by(carrier) %>%
slice_sample(n=50)
set.seed(90)
flights %>%
select(arr_delay, carrier,origin) %>%
filter(carrier%in%c("DL","UA")) %>%
group_by(carrier) %>%
slice_sample(n=50) %>%
ungroup()
set.seed(90)
flight_sample <- flights %>%
select(arr_delay, carrier,origin) %>%
filter(carrier%in%c("DL","UA")) %>%
group_by(carrier) %>%
slice_sample(n=50) %>%
ungroup()
ggplot(data = flight_sample, aes(x = arr_delay)) +
geom_density(fill="cyan") +
facet_wrap(~carrier)+
labs(x = "Arrival Delay") +
theme_classic()
ggplot(data = flight_sample, aes(y = arr_delay, x= carrier)) +
geom_boxplot(fill="cyan") +
labs(x = "Arrival Delay") +
theme_classic()
flight_sample %>%
group_by(carrier) %>%
summarize(n = n(), mean_rating = mean(arr_delay), std_dev = sd(arr_delay))
flight_sample %>%
group_by(carrier) %>%
summarize(n = n(), mean_delay = mean(arr_delay), std_dev = sd(arr_delay))
# In calculate() step replace "diff in means" with "diff in medians"
null_distribution_flights_mean <- flight_sample %>%
specify(formula = arr_delay ~ carrier) %>%
hypothesize(null = "independence") %>%
#  generate(reps = 1000, type = "permute") %>%
calculate(stat = "t", order = c("DL", "UA"))
null_distribution_flights_mean
?get_p_value
vignette("infer")
# Get the null distribution
null_dist <- flight_sample %>%
specify(formula = arr_delay ~ carrier) %>%
assume("t")
null_dist
# Find observed difference
obs_flights_mean_diff <- flight_sample %>%
specify(formula = arr_delay ~ carrier) %>%
hypothesize(null = "independence") %>%
#  generate(reps = 1000, type = "permute") %>%
calculate(stat = "t", order = c("DL", "UA"))
visualize(null_dist)
visualize(null_dist) +
theme_classic()
visualize(null_dist) +
theme_classic() +
geom_vline(xintercept = obs_flights_mean_diff, col="red")
obs_flights_mean_diff
visualize(null_dist) +
theme_classic() +
shade_p_value(obs_stat = obs_flights_mean_diff, direction = "both")
#Get p-value
null_dist %>%
get_p_value(obs_stat = obs_flights_mean_diff, direction = "both")
# Get the null distribution
null_dist_permute <- flight_sample %>%
specify(formula = arr_delay ~ carrier) %>%
hypothesize(null = "independence") %>%
generate(reps = 1000, type = "permute") %>%
calculate(stat = "diff in means", order = c("DL", "UA"))
# Find observed difference
obs_flights_mean_diff_permute <- flight_sample %>%
specify(formula = arr_delay ~ carrier) %>%
hypothesize(null = "independence") %>%
calculate(stat = "diff in means", order = c("DL", "UA"))
# Find observed difference
obs_flights_mean_diff_permute <- flight_sample %>%
specify(formula = arr_delay ~ carrier) %>%
calculate(stat = "diff in means", order = c("DL", "UA"))
visualize(null_dist_permute) +
theme_classic() +
shade_p_value(obs_stat = obs_flights_mean_diff_permute, direction = "both")
#Get p-value
null_dist_permute %>%
get_p_value(obs_stat = obs_flights_mean_diff_permute, direction = "both")
null_dist_permute %>%
get_ci(level=0.95,type="percentile")
# Get the null distribution
null_dist_permute_median <- flight_sample %>%
specify(formula = arr_delay ~ carrier) %>%
hypothesize(null = "independence") %>%
generate(reps = 1000, type = "permute") %>%
calculate(stat = "diff in medians", order = c("DL", "UA"))
null_dist_permute_median %>%
get_ci(level=0.95,type="percentile")
# Get the null distribution
null_dist_permute_median <- flight_sample %>%
specify(formula = arr_delay ~ carrier) %>%
#  hypothesize(null = "independence") %>%
generate(reps = 1000, type = "permute") %>%
calculate(stat = "diff in medians", order = c("DL", "UA"))
# Get the null distribution
null_dist_permute_median <- flight_sample %>%
specify(formula = arr_delay ~ carrier) %>%
hypothesize(null = "independence") %>%
generate(reps = 1000, type = "permute") %>%
calculate(stat = "diff in medians", order = c("DL", "UA"))
library(knitr)
library(kableExtra)
knitr::opts_chunk$set(echo = TRUE)
ggplot(data = flight_sample, aes(x = arr_delay)) +
geom_density(fill="cyan") +
facet_wrap(~carrier)+
labs(x = "Arrival Delay") +
theme_classic()
library(tidyverse)
library(infer)
library(moderndive)
library(nycflights13)
library(ggplot2movies)
set.seed(90)
flight_sample <- flights %>%
select(arr_delay, carrier,origin) %>%
filter(carrier%in%c("DL","UA")) %>%
group_by(carrier) %>%
slice_sample(n=50) %>%
ungroup()
ggplot(data = flight_sample, aes(x = arr_delay)) +
geom_density(fill="cyan") +
facet_wrap(~carrier)+
labs(x = "Arrival Delay") +
theme_classic()
library(knitr)
library(kableExtra)
knitr::opts_chunk$set(echo = TRUE)
evals_ch5 <- evals %>%
select(ID, score, bty_avg, age)
library(knitr)
library(kableExtra)
knitr::opts_chunk$set(echo = TRUE)
evals_ch5 <- evals %>%
select(ID, score, bty_avg, age)
evals_ch5 <- evals %>%
select(ID, score, bty_avg, age)
library(tidyverse)
library(infer)
library(moderndive)
evals_ch5 <- evals %>%
select(ID, score, bty_avg, age)
glimpse(evals_ch5)
ggplot(evals_ch5,
aes(x = bty_avg, y = score)) +
geom_point() +
labs(x = "Beauty Score",
y = "Teaching Score",
title = "Relationship between teaching and beauty scores") +
geom_smooth(method = "lm", se = FALSE) +
theme_classic()
ggplot(evals_ch5,
aes(x = bty_avg, y = score)) +
geom_point() +
labs(x = "Beauty Score",
y = "Teaching Score",
title = "Relationship between teaching and beauty scores") +
geom_smooth(method = "lm", se = FALSE) +
theme_classic()
# Fit regression model:
score_model <- lm(score ~ bty_avg, data = evals_ch5)
# Get regression table:
get_regression_table(score_model)
?evals
avocados
ggplot(avocados,
aes(x = total_volume, y = average_price)) +
geom_point() +
labs(x = "Average Price",
y = "Total Volume",
title = "Relationship between average price and total volume") +
geom_smooth(method = "lm", se = FALSE) +
theme_classic()
glimpse(avocados)
ggplot(avocados %>% filter(year==2015),
aes(x = total_volume, y = average_price)) +
geom_point() +
labs(x = "Average Price",
y = "Total Volume",
title = "Relationship between average price and total volume") +
geom_smooth(method = "lm", se = FALSE) +
theme_classic()
ggplot(ev_charging,
aes(x = kwh_total, y = dollars)) +
geom_point() +
labs(x = "Average Price",
y = "Total Volume",
title = "Relationship between average price and total volume") +
geom_smooth(method = "lm", se = FALSE) +
theme_classic()
ggplot(ev_charging,
aes(y = kwh_total, x = dollars)) +
geom_point() +
labs(x = "Average Price",
y = "Total Volume",
title = "Relationship between average price and total volume") +
geom_smooth(method = "lm", se = FALSE) +
theme_classic()
ggplot(ev_charging,
aes(y = kwh_total, x = dollars)) +
geom_point() +
labs(x = "Money Paid",
y = "Total Energy",
title = "Relationship between average price and total volume") +
geom_smooth(method = "lm", se = FALSE) +
theme_classic()
ggplot(ev_charging %>% filter(dollars>0),
aes(y = kwh_total, x = dollars)) +
geom_point() +
labs(x = "Money Paid",
y = "Total Energy",
title = "Relationship between average price and total volume") +
geom_smooth(method = "lm", se = FALSE) +
theme_classic()
summary(ev_charging)
summary(ev_charging %>% filter(dollars>0))
summary(ev_charging %>% filter(dollars>0.5))
ggplot(ev_charging %>% filter(dollars>0.5),
aes(y = kwh_total, x = dollars)) +
geom_point() +
labs(x = "Money Paid",
y = "Total Energy",
title = "Relationship between average price and total volume") +
geom_smooth(method = "lm", se = FALSE) +
theme_classic()
ev_chp10 <- ev_charging %>%
select(kwh_total,dollars) %>%
filter(dollars>0.5)
glimpse(ev_chp10)
ggplot(ev_chp10,
aes(y = kwh_total, x = dollars)) +
geom_point() +
labs(x = "Money Paid",
y = "Total Energy",
title = "Relationship between money paid for charging session and total energy used") +
geom_smooth(method = "lm", se = FALSE) +
theme_classic()
# Fit regression model:
score_model <- lm(kwh_total ~ dollars, data = ev_chp10)
# Fit regression model:
ev_model <- lm(kwh_total ~ dollars, data = ev_chp10)
# Get regression table:
get_regression_table(ev_model)
library(knitr)
library(kableExtra)
knitr::opts_chunk$set(echo = TRUE)
score_regression_points <- get_regression_points(score_model)
library(tidyverse)
library(infer)
library(moderndive)
evals_ch5 <- evals %>%
select(ID, score, bty_avg, age)
glimpse(evals_ch5)
score_model <- lm(score ~ bty_avg, data = evals_ch5)
score_regression_points <- get_regression_points(score_model)
head(score_regression_points)
plot(score_model)
?geom_smooth
ggplot(evals_ch5,
aes(x = bty_avg, y = score)) +
geom_point() +
labs(x = "Beauty Score",
y = "Teaching Score",
title = "Relationship between teaching and beauty scores") +
geom_smooth(method = "lm", se = FALSE, color="black") +
geom_smooth(method="loess", se=FALSE) +
theme_classic()
ggplot(evals_ch5,
aes(x = bty_avg, y = score)) +
geom_point() +
labs(x = "Beauty Score",
y = "Teaching Score",
title = "Relationship between teaching and beauty scores") +
geom_smooth(method = "lm", se = FALSE, color="black") +
geom_smooth(method="loess", se=FALSE) +
theme_classic()
ggplot(score_regression_points,
aes(x = score_hat, y = residual)) +
geom_point() +
labs(x = "Fitted Value",
y = "Residual",
title = "Checking linearity assumption") +
geom_smooth(method = "lm", se = FALSE, color="black") +
geom_smooth(method="loess", se=FALSE) +
theme_classic()
gplot(regression_points, aes(x = residual)) +
geom_histogram(binwidth = 0.25, fill = "cyan", color="black") +
labs(x = "Residual") =
theme_classic()
gplot(score_regression_points, aes(x = residual)) +
geom_histogram(binwidth = 0.25, fill = "cyan", color="black") +
labs(x = "Residual") =
theme_classic()
ggplot(score_regression_points, aes(x = residual)) +
geom_histogram(binwidth = 0.25, fill = "cyan", color="black") +
labs(x = "Residual") =
theme_classic()
ggplot(score_regression_points, aes(x = residual)) +
geom_histogram(binwidth = 0.25, fill = "cyan", color="black") +
labs(x = "Residual") +
theme_classic()
ggplot(score_regression_points, aes(x = bty_avg, y = residual)) +
geom_point() +
labs(x = "Beauty Score", y = "Residual") +
geom_hline(yintercept = 0, col = "blue", size = 1)
ggplot(regression_points, aes(x = residual)) +
geom_histogram(binwidth = 0.25, color = "black", fill = "cyan") +
labs(x = "Residual") +
theme_classic()
