xlim(5.1,5.9)
ggplot(rep_data,aes(x=ave)) +
geom_histogram() +
xlim(5.1,5.9)
# Repeat this 1000 times
rep_data2<-tibble(ave=replicate(1000,mean(round(runif(10,5,6),2))))
ggplot(rep_data,aes(x=ave)) +
geom_histogram() +
xlim(5.1,5.9) +
theme_classic()
ggplot(rep_data2,aes(x=ave)) +
geom_histogram() +
xlim(5.1,5.9) +
theme_classic()
pnorm(3,mu=6,sd=3)
?prnorm
?pnorm
pnorm(3,mean=6,sd=3)
pnorm(12,mean=6,sd=3,lower.tail = FALSE)
pnorm(12,mean=6,sd=3)-pnorm(0,mean=6,sd=3)
qnorm(.025,mean=6,sd=3)
?qnorm
qnorm(.975,mean=6,sd=3)
qnorm(1,mean=6,sd=3)
library(knitr)
library(kableExtra)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(moderndive)
library(infer)
pennies
pennies_sample
head(pennies_sample)
pennies_sample %>%
summarize(mean_year = mean(year))
ggplot(pennies_sample, aes(x = year)) +
geom_histogram(binwidth = 10, color = "white") +
theme_classic()
head(pennies_resamples)
pennies_resamples %>%
select(replicate==1) %>%
ggplot(aes(x = year)) +
geom_histogram(binwidth = 10, color = "white") +
theme_classic()
pennies_resamples %>%
filter(replicate==1) %>%
ggplot(aes(x = year)) +
geom_histogram(binwidth = 10, color = "white") +
theme_classic()
resampled_means <- pennies_resamples %>%
group_by(name) %>%
summarize(mean_year = mean(year)) %>%
ggplot(aes(x = mean_year)) +
geom_histogram(binwidth = 10, color = "white") +
theme_classic()
resampled_means <- pennies_resamples %>%
group_by(name) %>%
summarize(mean_year = mean(year)) %>%
ggplot(aes(x = mean_year)) +
geom_histogram(binwidth = 10, color = "white") +
theme_classic()
resampled_means <- pennies_resamples %>%
group_by(name) %>%
summarize(mean_year = mean(year)) %>%
ggplot(aes(x = mean_year)) +
geom_histogram(binwidth = 1, color = "white", boundary = 1990) +
theme_classic()
pennies_resamples %>%
group_by(name) %>%
summarize(mean_year = mean(year)) %>%
ggplot(aes(x = mean_year)) +
geom_histogram(binwidth = 1, color = "white", boundary = 1990) +
theme_classic()
head(pennies_sample)
#Set a seed for reproducibility of results.
set.seed(84337)
# Samples of size 50 repeated 1000 times
virtual_resampled_means <- pennies_sample %>%
rep_sample_n(size = 50, replace = TRUE, reps = 1000) %>%
group_by(replicate) %>%
summarize(mean_year = mean(year))
head(virtual_resampled_means)
# An estiamte of the population mean would be the mean of the bootstrap distribution
virtual_resampled_means %>%
summarize(mean_of_means = mean(mean_year))
# The bootstrap distribution
ggplot(virtual_resampled_means, aes(x = mean_year)) +
geom_histogram(binwidth = 1, color = "white", boundary = 1990) +
labs(x = "sample mean") +
theme_classic()
virtual_resampled_means %>%
summarize(mean_of_means = mean(mean_year))
library(knitr)
library(kableExtra)
knitr::opts_chunk$set(echo = TRUE)
qnorm(.68+32/2)
qnorm(.68+.32/2)
library(tidyverse)
library(moderndive)
head(pennies_sample)
set.seed(52249)
pennies_sample %>%
rep_sample_n(size = 50, replace = TRUE, reps = 10)
set.seed(52249)
pennies_sample %>%
rep_sample_n(size = 50, replace = TRUE, reps = 10) %>%
group_by(replicate) %>%
summarize(mean=mean(year))
set.seed(52249)
bootstrap_dist<-pennies_sample %>%
rep_sample_n(size = 50, replace = TRUE, reps = 10) %>%
group_by(replicate) %>%
summarize(mean=mean(year))
set.seed(52249)
bootstrap_dist<-pennies_sample %>%
rep_sample_n(size = 50, replace = TRUE, reps = 10) %>%
group_by(replicate) %>%
summarize(ave=mean(year))
bootstrap_dist %>%
ggplot(aes(x=ave)) +
geom_histogram(binwidth = 1, color = "white", boundary = 1990, fill = "cyan") +
theme_classic()
set.seed(52249)
bootstrap_dist<-pennies_sample %>%
rep_sample_n(size = 50, replace = TRUE, reps = 1000) %>%
group_by(replicate) %>%
summarize(ave=mean(year))
bootstrap_dist %>%
ggplot(aes(x=ave)) +
geom_histogram(binwidth = 1, color = "white", boundary = 1990, fill = "cyan") +
theme_classic()
bootstrap_dist %>%
ggplot(aes(x=ave)) +
geom_histogram(binwidth = 1, color = "black", boundary = 1990, fill = "cyan") +
theme_classic()
?quantile
quantile(bootstrap_dist,probs=c(2.5,97.5))
quantile(bootstrap_dist,probs=c(0.25,.975))
quantile(bootstrap_dist$ave,probs=c(0.25,.975))
bootstrap_dist %>%
summarize(lower=quantile(ave,probs=0.25),upper=qunatile=ave,probs=.975))
bootstrap_dist %>%
summarize(lower=quantile(ave,probs=0.25),upper=quantile(ave,probs=.975))
bootstrap_dist %>%
summarize(center=mean(ave),lower=center-sd(ave)*qnorn(.975))
bootstrap_dist %>%
summarize(center=mean(ave),lower=center-sd(ave)*qnorm(.975))
bootstrap_dist %>%
summarize(center=mean(ave),lower=center-sd(ave)*qnorm(.975),upper=center+sd(ave)*qnorm(.975))
bootstrap_dist %>%
summarize(center=mean(ave),
lower=quantile(ave,probs=0.25),
upper=quantile(ave,probs=.975))
bootstrap_dist %>%
summarize(center=mean(ave),
lower=center-sd(ave)*qnorm(.975),
upper=center+sd(ave)*qnorm(.975))
library(knitr)
library(kableExtra)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(moderndive)
library(infer)
?specify
pennies_sample %>%
specify(year~)
pennies_sample %>%
specify(year)
pennies_sample %>%
specify(formula=year~)
pennies_sample %>%
specify(response=year)
pennies_sample %>%
specify(response=year) %>%
head()
pennies_sample %>%
specify(formula=year~NULL) %>%
head()
pennies_sample %>%
specify(formula=year~NULL) %>%
generate(reps = 1000, type = "bootstrap") %>%
head()
pennies_sample %>%
specify(formula=year~NULL) %>%
generate(reps = 1000) %>%
calculate(stat = "mean") %>%
head()
boot_dist_mean <- pennies_sample %>%
specify(formula=year~NULL) %>%
generate(reps = 1000) %>%
calculate(stat = "mean")
boot_dist_mean <- pennies_sample %>%
specify(formula=year~NULL) %>%
generate(reps = 1000, type = "bootstrap") %>%
calculate(stat = "mean")
# Visualize the results
visualize(boot_dist_mean)
# Visualize the results
visualize(boot_dist_mean) +
shade_confidence_interval(endpoints = percentile_ci)
?shade_confidence_interval
(percentile_ci <- boot_dist_mean %>%
get_confidence_interval(level = 0.95, type = "percentile"))
# Visualize the results
visualize(boot_dist_mean) +
shade_confidence_interval(endpoints = percentile_ci)
(standard_error_ci <- boot_dist_mean %>%
get_confidence_interval(type = "se", point_estimate = mean(pennies_sample)))
mean(pennies_sample)
mean_pennies <- pennies_sample %>%
summarize(year)
(mean_pennies <- pennies_sample %>%
summarize(year))
(mean_pennies <- pennies_sample %>%
summarize(ave=mean(year)))
(mean_pennies <- pennies_sample %>%
summarize(ave=mean(year)) %>%
pull())
(standard_error_ci <- boot_dist_mean %>%
get_confidence_interval(type = "se", point_estimate = mean_pennies))
set.seed(539)
bootstrap_distribution <- pennies_sample %>%
specify(formula = year ~ NULL) %>%
generate(reps = 1000) %>%
calculate(stat = "median")
set.seed(539)
bootstrap_distribution <- pennies_sample %>%
specify(formula = year ~ NULL) %>%
generate(reps = 1000, type="bootstrap") %>%
calculate(stat = "median")
percentile_ci <- bootstrap_distribution %>%
get_confidence_interval(level = 0.95, type = "percentile")
percentile_ci
visualize(bootstrap_distribution)
visualize(bootstrap_distribution) +
shade_confidence_interval(endpoints = percentile_ci) +
theme_classic()
library(knitr)
library(kableExtra)
knitr::opts_chunk$set(echo = TRUE)
set.seed(911)
sample1<-bowl %>%
rep_sample_n(size = 100, reps = 1, replace = FALSE)
library(tidyverse)
library(moderndive)
library(infer)
bowl %>%
summarize(red=mean(color=="red"),total=n(),num_red=sum(color=="red"))
set.seed(911)
sample1<-bowl %>%
rep_sample_n(size = 100, reps = 1, replace = FALSE)
sample1
sample1 %>%
summarize(red=mean(color=="red"),total=n(),num_red=sum(color=="red"))
sample1 %>%
specify(formula = color ~ NULL, success = "red") %>%
generate(reps = 1000, type = "bootstrap") %>%
calculate(stat = "prop")
(bootstrap_dist1<-sample1 %>%
specify(formula = color ~ NULL, success = "red") %>%
generate(reps = 1000, type = "bootstrap") %>%
calculate(stat = "prop"))
percentile_ci_1 <- bootstrap_dist1p %>%
get_confidence_interval(level = 0.90, type = "percentile")
percentile_ci_1 <- bootstrap_dist1 %>%
get_confidence_interval(level = 0.90, type = "percentile")
percentile_ci_1
bowl %>%
rep_sample_n(size = 100, reps = 1, replace = FALSE) %>%
specify(formula = color ~ NULL, success = "red") %>%
generate(reps = 1000, type = "bootstrap") %>%
calculate(stat = "prop") %>%
get_confidence_interval(level = 0.90, type = "percentile")
bowl %>%
rep_sample_n(size = 100, reps = 1, replace = FALSE) %>%
specify(formula = color ~ NULL, success = "red") %>%
generate(reps = 1000, type = "bootstrap") %>%
calculate(stat = "prop") %>%
get_confidence_interval(level = 0.90, type = "percentile")
?nest
?get_ci
?calculate
# Function to find a confidence interval
ci_pipeline <- function(sample_data) {
sample_data %>%
specify(formula = color ~ NULL, success = "red") %>%
generate(reps = 1000, type = "bootstrap") %>%
calculate(stat = "prop") %>%
get_confidence_interval(level = 0.90, type = "percentile")
}
sample1
ci_pipeline(sample1)
ci_pipeline(sample1)
ci_pipeline(sample1)
ci_pipeline(sample1)
bowl %>%
rep_sample_n(size = 100, reps = 2, replace = FALSE) %>%
group_by(replicate) %>%
nest()
bowl %>%
rep_sample_n(size = 100, reps = 2, replace = FALSE) %>%
group_by(replicate)
bowl %>%
rep_sample_n(size = 100, reps = 2, replace = FALSE) %>%
group_by(replicate) %>%
nest()
set.seed(9073)
bowl %>%
rep_sample_n(size = 100, reps = 2, replace = FALSE) %>%
group_by(replicate) %>%
nest()
set.seed(9073)
bowl %>%
rep_sample_n(size = 100, reps = 2, replace = FALSE) %>%
group_by(replicate) %>%
nest() %>%
mutate(bootstraps = map(data, ci_pipeline))
set.seed(9073)
bowl %>%
rep_sample_n(size = 100, reps = 2, replace = FALSE) %>%
group_by(replicate) %>%
nest()
set.seed(9073)
bowl %>%
rep_sample_n(size = 100, reps = 2, replace = FALSE) %>%
group_by(replicate) %>%
nest() %>%
mutate(bootstraps = map(data, ci_pipeline))
set.seed(9073)
bowl %>%
rep_sample_n(size = 100, reps = 2, replace = FALSE) %>%
group_by(replicate) %>%
nest() %>%
mutate(bootstraps = map(data, ci_pipeline)) %>%
unnest(bootstraps)
set.seed(9073)
bowl %>%
rep_sample_n(size = 100, reps = 2, replace = FALSE) %>%
group_by(replicate) %>%
nest() %>%
mutate(bootstraps = map(data, ci_pipeline)) %>%
unnest(bootstraps) %>%
mutate(captured = lower_ci <= 0.375 & 0.375 <= upper_ci)
set.seed(9073)
bowl %>%
rep_sample_n(size = 100, reps = 2, replace = FALSE) %>%
group_by(replicate) %>%
nest() %>%
mutate(bootstraps = map(data, ci_pipeline)) %>%
unnest(bootstraps) %>%
mutate(captured = lower_ci <= 0.375 & 0.375 <= upper_ci) -> temp
temp
set.seed(9073)
bowl %>%
rep_sample_n(size = 100, reps = 2, replace = FALSE) %>%
group_by(replicate) %>%
nest() %>%
mutate(bootstraps = map(data, ci_pipeline)) %>%
unnest(bootstraps) %>%
mutate(captured = lower_ci <= 0.375 & 0.375 <= upper_ci) -> sim_cis
sim_cis
set.seed(9073)
bowl %>%
rep_sample_n(size = 100, reps = 2, replace = FALSE) %>%
group_by(replicate) %>%
nest() %>%
mutate(bootstraps = map(data, ci_pipeline)) %>%
unnest(bootstraps) %>%
mutate(captured = lower_ci <= 0.375 & 0.375 <= upper_ci) -> sim_cis
sim_cis
set.seed(9073)
bowl %>%
rep_sample_n(size = 100, reps = 100, replace = FALSE) %>%
group_by(replicate) %>%
nest() %>%
mutate(bootstraps = map(data, ci_pipeline)) %>%
unnest(bootstraps) %>%
mutate(captured = lower_ci <= 0.375 & 0.375 <= upper_ci) -> sim_cis
head(sim_cis)
sim_cis %>%
summary(mean(captured))
sim_cis %>%
summarize(coverage=mean(captured))
sim_cis %>%
group_by(replicate) %>%
summarize(coverage=mean(captured))
sim_cis %>%
summarize(coverage=mean(captured))
sim_cis %>%
ungroup() %>%
summarize(coverage=mean(captured))
sim_cis %>%
ungroup() %>%
summarize(coverage=sum(captured))
ggplot(sim_cis) +
geom_segment(aes(
y = replicate, yend = replicate, x = lower, xend = upper,
alpha = factor(captured, levels = c("TRUE", "FALSE"))
)) +
geom_point(
aes(
x = sample_prop, y = replicate,
alpha = factor(captured, levels = c("TRUE", "FALSE"))
),
show.legend = FALSE, size = 1
) +
labs(
x = expression("Proportion of red balls"), y = "Confidence interval number",
alpha = "Captured"
) +
geom_vline(xintercept = p_red, color = "red") +
coord_cartesian(xlim = c(0.1, 0.7)) +
theme_light() +
theme(
panel.grid.major.y = element_blank(), panel.grid.minor.y = element_blank(),
panel.grid.minor.x = element_blank()
)
ggplot(sim_cis) +
geom_segment(aes(
y = replicate, yend = replicate, x = lower, xend = upper,
alpha = factor(captured, levels = c("TRUE", "FALSE"))
)) +
geom_point(
aes(
x = sample_prop, y = replicate,
alpha = factor(captured, levels = c("TRUE", "FALSE"))
),
show.legend = FALSE, size = 1
) +
labs(
x = expression("Proportion of red balls"), y = "Confidence interval number",
alpha = "Captured"
) +
geom_vline(xintercept = 0.375, color = "red") +
coord_cartesian(xlim = c(0.1, 0.7)) +
theme_light() +
theme(
panel.grid.major.y = element_blank(), panel.grid.minor.y = element_blank(),
panel.grid.minor.x = element_blank()
)
ggplot(sim_cis) +
geom_segment(aes(
y = replicate, yend = replicate, x = lower_ci, xend = upper_ci,
alpha = factor(captured, levels = c("TRUE", "FALSE"))
)) +
geom_point(
aes(
x = sample_prop, y = replicate,
alpha = factor(captured, levels = c("TRUE", "FALSE"))
),
show.legend = FALSE, size = 1
) +
labs(
x = expression("Proportion of red balls"), y = "Confidence interval number",
alpha = "Captured"
) +
geom_vline(xintercept = 0.375, color = "red") +
coord_cartesian(xlim = c(0.1, 0.7)) +
theme_light() +
theme(
panel.grid.major.y = element_blank(), panel.grid.minor.y = element_blank(),
panel.grid.minor.x = element_blank()
)
# Function to find a confidence interval
ci_pipeline <- function(sample_data) {
sample_data %>%
specify(formula = color ~ NULL, success = "red") %>%
generate(reps = 1000, type = "bootstrap") %>%
calculate(stat = "prop") %>%
get_confidence_interval(level = 0.90, type = "percentile") %>%
mutate(mid_point=(upper_ci+lower_ci)/2)
}
ci_pipeline(sample1)
set.seed(9073)
bowl %>%
rep_sample_n(size = 100, reps = 100, replace = FALSE) %>%
group_by(replicate) %>%
nest() %>%
mutate(bootstraps = map(data, ci_pipeline)) %>%
unnest(bootstraps) %>%
mutate(captured = lower_ci <= 0.375 & 0.375 <= upper_ci) -> sim_cis
head(sim_cis)
sim_cis %>%
ungroup() %>%
summarize(coverage=sum(captured))
ggplot(sim_cis) +
geom_segment(aes(
y = replicate, yend = replicate, x = lower_ci, xend = upper_ci,
alpha = factor(captured, levels = c("TRUE", "FALSE"))
)) +
geom_point(
aes(
x = mid_point, y = replicate,
alpha = factor(captured, levels = c("TRUE", "FALSE"))
),
show.legend = FALSE, size = 1
) +
labs(
x = expression("Proportion of red balls"), y = "Confidence interval number",
alpha = "Captured"
) +
geom_vline(xintercept = 0.375, color = "red") +
coord_cartesian(xlim = c(0.1, 0.7)) +
theme_light() +
theme(
panel.grid.major.y = element_blank(), panel.grid.minor.y = element_blank(),
panel.grid.minor.x = element_blank()
)
library(ggplot2)
library(dplyr)
library(forcats)
library(moderndive)
