labs(x = "Beauty Score",
y = "Teaching Score",
title = "Relationship between teaching and beauty scores") +
geom_smooth(method = "lm", se = FALSE) +
theme_classic()
ggplot(evals_ch5,
aes(x = bty_avg, y = score)) +
geom_point() +
labs(x = "Beauty Score",
y = "Teaching Score",
title = "Relationship between teaching and beauty scores") +
geom_smooth(method = "lm", se = FALSE) +
theme_classic()
# Fit regression model:
score_model <- lm(score ~ bty_avg, data = evals_ch5)
# Get regression table:
get_regression_table(score_model)
?evals
avocados
ggplot(avocados,
aes(x = total_volume, y = average_price)) +
geom_point() +
labs(x = "Average Price",
y = "Total Volume",
title = "Relationship between average price and total volume") +
geom_smooth(method = "lm", se = FALSE) +
theme_classic()
glimpse(avocados)
ggplot(avocados %>% filter(year==2015),
aes(x = total_volume, y = average_price)) +
geom_point() +
labs(x = "Average Price",
y = "Total Volume",
title = "Relationship between average price and total volume") +
geom_smooth(method = "lm", se = FALSE) +
theme_classic()
ggplot(ev_charging,
aes(x = kwh_total, y = dollars)) +
geom_point() +
labs(x = "Average Price",
y = "Total Volume",
title = "Relationship between average price and total volume") +
geom_smooth(method = "lm", se = FALSE) +
theme_classic()
ggplot(ev_charging,
aes(y = kwh_total, x = dollars)) +
geom_point() +
labs(x = "Average Price",
y = "Total Volume",
title = "Relationship between average price and total volume") +
geom_smooth(method = "lm", se = FALSE) +
theme_classic()
ggplot(ev_charging,
aes(y = kwh_total, x = dollars)) +
geom_point() +
labs(x = "Money Paid",
y = "Total Energy",
title = "Relationship between average price and total volume") +
geom_smooth(method = "lm", se = FALSE) +
theme_classic()
ggplot(ev_charging %>% filter(dollars>0),
aes(y = kwh_total, x = dollars)) +
geom_point() +
labs(x = "Money Paid",
y = "Total Energy",
title = "Relationship between average price and total volume") +
geom_smooth(method = "lm", se = FALSE) +
theme_classic()
summary(ev_charging)
summary(ev_charging %>% filter(dollars>0))
summary(ev_charging %>% filter(dollars>0.5))
ggplot(ev_charging %>% filter(dollars>0.5),
aes(y = kwh_total, x = dollars)) +
geom_point() +
labs(x = "Money Paid",
y = "Total Energy",
title = "Relationship between average price and total volume") +
geom_smooth(method = "lm", se = FALSE) +
theme_classic()
ev_chp10 <- ev_charging %>%
select(kwh_total,dollars) %>%
filter(dollars>0.5)
glimpse(ev_chp10)
ggplot(ev_chp10,
aes(y = kwh_total, x = dollars)) +
geom_point() +
labs(x = "Money Paid",
y = "Total Energy",
title = "Relationship between money paid for charging session and total energy used") +
geom_smooth(method = "lm", se = FALSE) +
theme_classic()
# Fit regression model:
score_model <- lm(kwh_total ~ dollars, data = ev_chp10)
# Fit regression model:
ev_model <- lm(kwh_total ~ dollars, data = ev_chp10)
# Get regression table:
get_regression_table(ev_model)
library(knitr)
library(kableExtra)
knitr::opts_chunk$set(echo = TRUE)
score_regression_points <- get_regression_points(score_model)
library(tidyverse)
library(infer)
library(moderndive)
evals_ch5 <- evals %>%
select(ID, score, bty_avg, age)
glimpse(evals_ch5)
score_model <- lm(score ~ bty_avg, data = evals_ch5)
score_regression_points <- get_regression_points(score_model)
head(score_regression_points)
plot(score_model)
?geom_smooth
ggplot(evals_ch5,
aes(x = bty_avg, y = score)) +
geom_point() +
labs(x = "Beauty Score",
y = "Teaching Score",
title = "Relationship between teaching and beauty scores") +
geom_smooth(method = "lm", se = FALSE, color="black") +
geom_smooth(method="loess", se=FALSE) +
theme_classic()
ggplot(evals_ch5,
aes(x = bty_avg, y = score)) +
geom_point() +
labs(x = "Beauty Score",
y = "Teaching Score",
title = "Relationship between teaching and beauty scores") +
geom_smooth(method = "lm", se = FALSE, color="black") +
geom_smooth(method="loess", se=FALSE) +
theme_classic()
ggplot(score_regression_points,
aes(x = score_hat, y = residual)) +
geom_point() +
labs(x = "Fitted Value",
y = "Residual",
title = "Checking linearity assumption") +
geom_smooth(method = "lm", se = FALSE, color="black") +
geom_smooth(method="loess", se=FALSE) +
theme_classic()
gplot(regression_points, aes(x = residual)) +
geom_histogram(binwidth = 0.25, fill = "cyan", color="black") +
labs(x = "Residual") =
theme_classic()
gplot(score_regression_points, aes(x = residual)) +
geom_histogram(binwidth = 0.25, fill = "cyan", color="black") +
labs(x = "Residual") =
theme_classic()
ggplot(score_regression_points, aes(x = residual)) +
geom_histogram(binwidth = 0.25, fill = "cyan", color="black") +
labs(x = "Residual") =
theme_classic()
ggplot(score_regression_points, aes(x = residual)) +
geom_histogram(binwidth = 0.25, fill = "cyan", color="black") +
labs(x = "Residual") +
theme_classic()
ggplot(score_regression_points, aes(x = bty_avg, y = residual)) +
geom_point() +
labs(x = "Beauty Score", y = "Residual") +
geom_hline(yintercept = 0, col = "blue", size = 1)
ggplot(regression_points, aes(x = residual)) +
geom_histogram(binwidth = 0.25, color = "black", fill = "cyan") +
labs(x = "Residual") +
theme_classic()
library(tidyverse)
library(moderndive)
library(infer)
library(palmerpenguins)
ggplot(data = pen, aes(y = body_mass_g, x = flipper_length_mm)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Flipper length (millimeters)",
y = "Body mass (grams)",
title = "Flipper Length and Body Mass of Three Species of Penguins")
pen <-penguins  %>%
filter(!is.na(flipper_length_mm))
ggplot(data = pen, aes(y = body_mass_g, x = flipper_length_mm)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Flipper length (millimeters)",
y = "Body mass (grams)",
title = "Flipper Length and Body Mass of Three Species of Penguins")
pen_model <- lm(body_mass_g ~ flipper_length_mm, data = pen)
get_regression_table(pen_model)
ggplot(regression_points, aes(x = residual)) +
geom_histogram(binwidth = 150, color = "white") +
labs(x = "Residual")
regression_points <- get_regression_points(pen_model)
ggplot(regression_points, aes(x = residual)) +
geom_histogram(binwidth = 150, color = "white") +
labs(x = "Residual")
ggplot(regression_points, aes(x = residual)) +
geom_histogram(binwidth = 150, color = "black", fill="cyan") +
labs(x = "Residual") +
theme_classic()
ggplot(regression_points, aes(x = flipper_length_mm, y = residual)) +
geom_point() +
labs(x = "Flipper length in mm ", y = "Residual") +
geom_hline(yintercept = 0, col = "blue", size = 1) +
theme_classic()
set.seed(126)
bootstrap_distn_slope <- pen %>%
specify(formula = body_mass_g ~ flipper_length_mm) %>%
generate(reps = 1000, type = "bootstrap") %>%
calculate(stat = "slope")
visualize(bootstrap_distn_slope)
bootstrap_distn_slope %>%
summarize(lower_ci = quantile(stat, 0.025),
upper_ci = quantile(stat, 0.975))
bootstrap_distn_slope %>%
get_ci(type="percentile")
ggplot(data = pen, aes(y = body_mass_g, x = bill_length_mm, color=species)) +
geom_point() +
geom_parallel_slopes(method = "lm", se = FALSE) +
labs(x = "Bill length (millimeters)",
y = "Body mass (grams)",
title = "Bill Length and Body Mass of three Species of Penguins")
# Fit regression model:
pen_parallel <- lm(body_mass_g ~ bill_length_mm + species, data = pen)
# Get regression table:
get_regression_table(pen_parallel)
# Get regression points:
regression_points_par <- get_regression_points(pen_parallel)
ggplot(data = pen, aes(y = body_mass_g, x = bill_length_mm, color=species)) +
geom_point() +
geom_parallel_slopes(method = "lm", se = FALSE) +
labs(x = "Bill length (millimeters)",
y = "Body mass (grams)",
title = "Bill Length and Body Mass of three Species of Penguins")
#Add code for the histogram:
ggplot(regression_points_par, aes(x = residual)) +
geom_histogram(binwidth = 150, color = "black", fill = "cyan") +
labs(x = "Residual") +
theme_classic()
#Add code to check this condition:
ggplot(regression_points_par, aes(x = bill_length_mm, y = residual, color =species)) +
geom_point() +
labs(x = "bill Length in mm ", y = "Residual") +
geom_hline(yintercept = 0, col = "blue", size = 1)
#Add code to check this condition:
ggplot(regression_points_par, aes(x = bill_length_mm, y = residual, color =species)) +
geom_point() +
labs(x = "bill Length in mm ", y = "Residual") +
geom_hline(yintercept = 0, col = "blue", size = 1) +
theme_classic()
library(knitr)
library(kableExtra)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(infer)
library(moderndive)
evals_ch5 <- evals %>%
select(ID, score, bty_avg, age)
glimpse(evals_ch5)
score_model <- lm(score ~ bty_avg, data = evals_ch5)
get_regression_table(score_model)
null_distn_slope <- evals %>%
specify(score ~ bty_avg) %>%
hypothesize(null = "independence") %>%
generate(reps = 1000, type = "permute") %>%
calculate(stat = "slope")
visualize(null_distn_slope)
(observed_slope <- evals %>%
specify(score ~ bty_avg) %>%
calculate(stat = "slope"))
visualize(null_distn_slope) %>%
shade_p_value(obs_stat = observed_slope, direction = "both")
visualize(null_distn_slope) +
shade_p_value(obs_stat = observed_slope, direction = "both")
null_distn_slope %>%
get_p_value(obs_stat = observed_slope, direction = "both")
set.seed(839)
bootstrap_distn_slope <- evals_ch5 %>%
specify(formula = score ~ bty_avg) %>%
generate(reps = 1000, type = "bootstrap") %>%
calculate(stat = "correlation")
set.seed(839)
bootstrap_distn_slope <- evals_ch5 %>%
specify(formula = score ~ bty_avg) %>%
generate(reps = 1000, type = "bootstrap") %>%
calculate(stat = "correlation")
set.seed(839)
bootstrap_distn_corr <- evals_ch5 %>%
specify(formula = score ~ bty_avg) %>%
generate(reps = 1000, type = "bootstrap") %>%
calculate(stat = "correlation")
percentile_ci <- bootstrap_distn_corr %>%
get_confidence_interval(type = "percentile", level = 0.95)
percentile_ci
(observed_corr <- evals %>%
specify(score ~ bty_avg) %>%
calculate(stat = "correlation"))
?get_confidence_interval
bootstrap_distn_corr %>%
get_confidence_interval(point_estimate = observed_corr, type = "se", level = 0.95)
(std_err<-bootstrap_distn_corr %>%
get_confidence_interval(point_estimate = observed_corr, type = "se", level = 0.95))
visualize(bootstrap_distn_corr)
visualize(bootstrap_distn_corr) +
theme_classic()
set.seed(2001)
null_distn_corr <- evals %>%
specify(score ~ bty_avg) %>%
hypothesize(null = "independence") %>%
generate(reps = 1000, type = "permute") %>%
calculate(stat = "correlation")
visualize(null_distn_corr)
visualize(null_distn_corr) +
shade_p_value(obs_stat = observed_corr, direction = "both")
null_distn_corr %>%
get_p_value(obs_stat = observed_corr, direction = "both")
library(knitr)
library(kableExtra)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(infer)
library(moderndive)
evals_ch5 <- evals %>%
select(ID, score, bty_avg, age)
glimpse(evals_ch5)
score_model <- lm(score ~ bty_avg, data = evals_ch5)
get_regression_table(score_model)
t-stat <- get_regression_table(score_model) %>%
select(term=="bty_avg")
t-stat <- get_regression_table(score_model) %>%
filter(term=="bty_avg")
get_regression_table(score_model) %>%
filter(term=="bty_avg")
get_regression_table(score_model) %>%
filter(term=="bty_avg") %>%
summarize(t-stat=(statistic-0)/std_error)
get_regression_table(score_model) %>%
filter(term=="bty_avg") %>%
summarize(t_stat=(statistic-0)/std_error)
get_regression_table(score_model) %>%
filter(term=="bty_avg") %>%
summarize(t_stat=(estimate-0)/std_error)
?pt
get_regression_table(score_model) %>%
filter(term=="bty_avg") %>%
summarize(t_stat=(estimate-0)/std_error),p-value=2*pt(t_stat,df=n()-2))
get_regression_table(score_model) %>%
filter(term=="bty_avg") %>%
summarize(t_stat=(estimate-0)/std_error),p_value=2*pt(t_stat,df=n()-2))
get_regression_table(score_model) %>%
filter(term=="bty_avg") %>%
summarize(t_stat=(estimate-0)/std_error,p_value=2*pt(t_stat,df=n()-2))
get_regression_table(score_model) %>%
filter(term=="bty_avg") %>%
summarize(n=n(),t_stat=(estimate-0)/std_error,p_value=2*pt(t_stat,df=n()-2))
get_regression_table(score_model) %>%
filter(term=="bty_avg") %>%
summarize(n=nrow(evals_ch5),t_stat=(estimate-0)/std_error,p_value=2*pt(t_stat,df=n-2))
pt(4.18,df=461)
get_regression_table(score_model) %>%
filter(term=="bty_avg") %>%
summarize(n=nrow(evals_ch5),
t_stat=(estimate-0)/std_error,
p_value=2*pt(t_stat,df=n-2,lower.tail = FALSE))
get_regression_table(score_model) %>%
filter(term=="bty_avg") %>%
summarize(n=nrow(evals_ch5),
t_stat=(estimate-0.1)/std_error,
p_value=2*pt(t_stat,df=n-2,lower.tail = FALSE))
get_regression_table(score_model) %>%
filter(term=="bty_avg") %>%
summarize(n=nrow(evals_ch5),
t_stat=(estimate-0.1)/std_error,
p_value=2*pt(t_stat,df=n-2,lower.tail = TRUE))
get_regression_table(score_model) %>%
filter(term=="bty_avg") %>%
summarize(n=nrow(evals_ch5),
lower_ci=estimate-std_error*qt(.975,df=n-2))
get_regression_table(score_model) %>%
filter(term=="bty_avg") %>%
summarize(n=nrow(evals_ch5),
lower_ci=estimate-std_error*qt(.975,df=n-2),
upper_ci=estimate+std_error*qt(.975,df=n-2))
library(knitr)
library(kableExtra)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(infer)
library(moderndive)
glimpse(house_prices)
library(tidyverse)
library(infer)
library(moderndive)
library(skimr)
house_prices %>%
select(price, sqft_living, condition) %>%
skim()
# Histogram of house price:
ggplot(house_prices, aes(x = price)) +
geom_histogram(color = "white") +
labs(x = "price (USD)", title = "House price") +
theme_classic()
# Histogram of house price:
ggplot(house_prices, aes(x = price)) +
geom_histogram(color = "black", fill = "cyan") +
labs(x = "price (USD)", title = "House price") +
theme_classic()
# Barplot of condition:
ggplot(house_prices, aes(x = condition)) +
geom_bar(color = "black", fill = "cyan") +
labs(x = "condition", title = "House condition") +
theme_classic()
# Histogram of sqft_living:
ggplot(house_prices, aes(x = sqft_living)) +
geom_histogram(color = "black", fill = "cyan") +
labs(x = "living space (square feet)", title = "House size") +
theme_classic()
# Histogram of sqft_living:
ggplot(house_prices, aes(x = sqft_living)) +
geom_density(color = "black", fill = "cyan") +
labs(x = "living space (square feet)", title = "House size") +
theme_classic()
house_prices_reduced <- house_prices %>%
mutate(
log10_price = log10(price),
log10_size = log10(sqft_living)) %>%
select(log10_price, log10_size, condition)
# Density plot of sqft_living:
ggplot(house_prices, aes(x = log10_size)) +
geom_density(color = "black", fill = "cyan") +
labs(x = "log10 living space (square feet)", title = "House size") +
theme_classic()
# Density plot of sqft_living:
ggplot(house_prices_reduced, aes(x = log10_size)) +
geom_density(color = "black", fill = "cyan") +
labs(x = "log10 living space (square feet)", title = "House size") +
theme_classic()
# Density plot of log10 price:
ggplot(house_prices_reduced, aes(x = log10_price)) +
geom_density(color = "black", fill = "cyan") +
labs(x = "log10 price (USD)", title = "House size") +
theme_classic()
# Plot interaction model
ggplot(house_prices,
aes(x = log10_size, y = log10_price, col = condition)) +
geom_point(alpha = 0.05) +
geom_smooth(method = "lm", se = FALSE) +
labs(y = "log10 price",
x = "log10 size",
title = "House prices in Seattle")
# Plot interaction model
ggplot(house_prices_reduced,
aes(x = log10_size, y = log10_price, col = condition)) +
geom_point(alpha = 0.05) +
geom_smooth(method = "lm", se = FALSE) +
labs(y = "log10 price",
x = "log10 size",
title = "House prices in Seattle")
# Plot parallel slopes model
ggplot(house_prices_reduced,
aes(x = log10_size, y = log10_price, col = condition)) +
geom_point(alpha = 0.05) +
geom_parallel_slopes(se = FALSE) +
labs(y = "log10 price",
x = "log10 size",
title = "House prices in Seattle")
ggplot(house_prices_reduced,
aes(x = log10_size, y = log10_price, col = condition)) +
geom_point(alpha = 0.4) +
geom_smooth(method = "lm", se = FALSE) +
labs(y = "log10 price",
x = "log10 size",
title = "House prices in Seattle") +
facet_wrap(~ condition)
# Fit regression model:
price_interaction <- lm(log10_price ~ log10_size * condition,
data = house_prices_reduced)
# Get regression table:
get_regression_table(price_interaction)
?augment
price_interaction %>%
augment(newdata=tibble(condition=5,log10_size-log(1900)))
library(tidyverse)
library(broom)
library(infer)
library(moderndive)
library(skimr)
price_interaction %>%
augment(newdata=tibble(condition=5,log10_size-log(1900)))
price_interaction %>%
augment(newdata=tibble(condition=5,log10_size=log(1900)))
price_interaction %>%
augment(newdata=tibble(condition=as.factor(5),log10_size=log(1900)))
price_interaction %>%
augment(newdata=tibble(condition=as.factor(4),log10_size=log(1900)))
levels(house_prices_reduced$condition)
price_interaction %>%
augment(newdata=tibble(condition="5",log10_size=log(1900)))
?predict
predict(price_interaction,newdata=tibble(condition="5",log10_size=log(1900)))
price_interaction %>%
augment(newdata=tibble(condition="5",log10_size=log10(1900)))
10^5.724213
# Fit regression model:
price_parallel <- lm(log10_price ~ log10_size + condition,
data = house_prices_reduced)
# Get regression table:
get_regression_table(price_parallel)
price_parallel %>%
augment(newdata=tibble(condition="5",log10_size=log10(1900)))
10^(2.88 + 0.096 + 0.837 * log10(1900))
price_parallel %>%
augment(newdata=tibble(condition="5",log10_size=log10(1900))) %>%
summarize(price=10^.fitted)
my_skim<-skim_with(numeric = sfl(hist = NULL))
house_prices %>%
select(price, sqft_living, condition) %>%
my_skim()
