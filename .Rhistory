library(tidyverse)
library(infer)
library(moderndive)
library(nycflights13)
library(ggplot2movies)
head(flights)
carrier
airlines
library(knitr)
library(kableExtra)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(infer)
library(moderndive)
library(nycflights13)
library(ggplot2movies)
str(flights)
airlines
set.seed(90)
flights %>%
select(arr_delay, carrier) %>%
filter(carrier=="DL",carrier=="UA")
set.seed(90)
flights %>%
select(arr_delay, carrier)
set.seed(90)
flights %>%
select(arr_delay, carrier) %>%
filter(carrier=="DL",carrier=="UA")
set.seed(90)
flights %>%
select(arr_delay, carrier) %>%
dplyr::filter(carrier=="DL",carrier=="UA")
set.seed(90)
flights %>%
select(arr_delay, carrier) %>%
filter(carrier%in%c("DL","UA"))
?slice_min
?sample_n
set.seed(90)
flights %>%
select(arr_delay, carrier) %>%
filter(carrier%in%c("DL","UA")) %>%
group_by(carrier) %>%
slice_sample(n=50)
set.seed(90)
flights %>%
select(arr_delay, carrier,origin) %>%
filter(carrier%in%c("DL","UA")) %>%
group_by(carrier) %>%
slice_sample(n=50)
set.seed(90)
flights %>%
select(arr_delay, carrier,origin) %>%
filter(carrier%in%c("DL","UA")) %>%
group_by(carrier) %>%
slice_sample(n=50) %>%
ungroup()
set.seed(90)
flight_sample <- flights %>%
select(arr_delay, carrier,origin) %>%
filter(carrier%in%c("DL","UA")) %>%
group_by(carrier) %>%
slice_sample(n=50) %>%
ungroup()
ggplot(data = flight_sample, aes(x = arr_delay)) +
geom_density(fill="cyan") +
facet_wrap(~carrier)+
labs(x = "Arrival Delay") +
theme_classic()
ggplot(data = flight_sample, aes(y = arr_delay, x= carrier)) +
geom_boxplot(fill="cyan") +
labs(x = "Arrival Delay") +
theme_classic()
flight_sample %>%
group_by(carrier) %>%
summarize(n = n(), mean_rating = mean(arr_delay), std_dev = sd(arr_delay))
flight_sample %>%
group_by(carrier) %>%
summarize(n = n(), mean_delay = mean(arr_delay), std_dev = sd(arr_delay))
# In calculate() step replace "diff in means" with "diff in medians"
null_distribution_flights_mean <- flight_sample %>%
specify(formula = arr_delay ~ carrier) %>%
hypothesize(null = "independence") %>%
#  generate(reps = 1000, type = "permute") %>%
calculate(stat = "t", order = c("DL", "UA"))
null_distribution_flights_mean
?get_p_value
vignette("infer")
# Get the null distribution
null_dist <- flight_sample %>%
specify(formula = arr_delay ~ carrier) %>%
assume("t")
null_dist
# Find observed difference
obs_flights_mean_diff <- flight_sample %>%
specify(formula = arr_delay ~ carrier) %>%
hypothesize(null = "independence") %>%
#  generate(reps = 1000, type = "permute") %>%
calculate(stat = "t", order = c("DL", "UA"))
visualize(null_dist)
visualize(null_dist) +
theme_classic()
visualize(null_dist) +
theme_classic() +
geom_vline(xintercept = obs_flights_mean_diff, col="red")
obs_flights_mean_diff
visualize(null_dist) +
theme_classic() +
shade_p_value(obs_stat = obs_flights_mean_diff, direction = "both")
#Get p-value
null_dist %>%
get_p_value(obs_stat = obs_flights_mean_diff, direction = "both")
# Get the null distribution
null_dist_permute <- flight_sample %>%
specify(formula = arr_delay ~ carrier) %>%
hypothesize(null = "independence") %>%
generate(reps = 1000, type = "permute") %>%
calculate(stat = "diff in means", order = c("DL", "UA"))
# Find observed difference
obs_flights_mean_diff_permute <- flight_sample %>%
specify(formula = arr_delay ~ carrier) %>%
hypothesize(null = "independence") %>%
calculate(stat = "diff in means", order = c("DL", "UA"))
# Find observed difference
obs_flights_mean_diff_permute <- flight_sample %>%
specify(formula = arr_delay ~ carrier) %>%
calculate(stat = "diff in means", order = c("DL", "UA"))
visualize(null_dist_permute) +
theme_classic() +
shade_p_value(obs_stat = obs_flights_mean_diff_permute, direction = "both")
#Get p-value
null_dist_permute %>%
get_p_value(obs_stat = obs_flights_mean_diff_permute, direction = "both")
null_dist_permute %>%
get_ci(level=0.95,type="percentile")
# Get the null distribution
null_dist_permute_median <- flight_sample %>%
specify(formula = arr_delay ~ carrier) %>%
hypothesize(null = "independence") %>%
generate(reps = 1000, type = "permute") %>%
calculate(stat = "diff in medians", order = c("DL", "UA"))
null_dist_permute_median %>%
get_ci(level=0.95,type="percentile")
# Get the null distribution
null_dist_permute_median <- flight_sample %>%
specify(formula = arr_delay ~ carrier) %>%
#  hypothesize(null = "independence") %>%
generate(reps = 1000, type = "permute") %>%
calculate(stat = "diff in medians", order = c("DL", "UA"))
# Get the null distribution
null_dist_permute_median <- flight_sample %>%
specify(formula = arr_delay ~ carrier) %>%
hypothesize(null = "independence") %>%
generate(reps = 1000, type = "permute") %>%
calculate(stat = "diff in medians", order = c("DL", "UA"))
library(knitr)
library(kableExtra)
knitr::opts_chunk$set(echo = TRUE)
ggplot(data = flight_sample, aes(x = arr_delay)) +
geom_density(fill="cyan") +
facet_wrap(~carrier)+
labs(x = "Arrival Delay") +
theme_classic()
library(tidyverse)
library(infer)
library(moderndive)
library(nycflights13)
library(ggplot2movies)
set.seed(90)
flight_sample <- flights %>%
select(arr_delay, carrier,origin) %>%
filter(carrier%in%c("DL","UA")) %>%
group_by(carrier) %>%
slice_sample(n=50) %>%
ungroup()
ggplot(data = flight_sample, aes(x = arr_delay)) +
geom_density(fill="cyan") +
facet_wrap(~carrier)+
labs(x = "Arrival Delay") +
theme_classic()
library(knitr)
library(kableExtra)
knitr::opts_chunk$set(echo = TRUE)
evals_ch5 <- evals %>%
select(ID, score, bty_avg, age)
library(knitr)
library(kableExtra)
knitr::opts_chunk$set(echo = TRUE)
evals_ch5 <- evals %>%
select(ID, score, bty_avg, age)
evals_ch5 <- evals %>%
select(ID, score, bty_avg, age)
library(tidyverse)
library(infer)
library(moderndive)
evals_ch5 <- evals %>%
select(ID, score, bty_avg, age)
glimpse(evals_ch5)
ggplot(evals_ch5,
aes(x = bty_avg, y = score)) +
geom_point() +
labs(x = "Beauty Score",
y = "Teaching Score",
title = "Relationship between teaching and beauty scores") +
geom_smooth(method = "lm", se = FALSE) +
theme_classic()
ggplot(evals_ch5,
aes(x = bty_avg, y = score)) +
geom_point() +
labs(x = "Beauty Score",
y = "Teaching Score",
title = "Relationship between teaching and beauty scores") +
geom_smooth(method = "lm", se = FALSE) +
theme_classic()
# Fit regression model:
score_model <- lm(score ~ bty_avg, data = evals_ch5)
# Get regression table:
get_regression_table(score_model)
?evals
avocados
ggplot(avocados,
aes(x = total_volume, y = average_price)) +
geom_point() +
labs(x = "Average Price",
y = "Total Volume",
title = "Relationship between average price and total volume") +
geom_smooth(method = "lm", se = FALSE) +
theme_classic()
glimpse(avocados)
ggplot(avocados %>% filter(year==2015),
aes(x = total_volume, y = average_price)) +
geom_point() +
labs(x = "Average Price",
y = "Total Volume",
title = "Relationship between average price and total volume") +
geom_smooth(method = "lm", se = FALSE) +
theme_classic()
ggplot(ev_charging,
aes(x = kwh_total, y = dollars)) +
geom_point() +
labs(x = "Average Price",
y = "Total Volume",
title = "Relationship between average price and total volume") +
geom_smooth(method = "lm", se = FALSE) +
theme_classic()
ggplot(ev_charging,
aes(y = kwh_total, x = dollars)) +
geom_point() +
labs(x = "Average Price",
y = "Total Volume",
title = "Relationship between average price and total volume") +
geom_smooth(method = "lm", se = FALSE) +
theme_classic()
ggplot(ev_charging,
aes(y = kwh_total, x = dollars)) +
geom_point() +
labs(x = "Money Paid",
y = "Total Energy",
title = "Relationship between average price and total volume") +
geom_smooth(method = "lm", se = FALSE) +
theme_classic()
ggplot(ev_charging %>% filter(dollars>0),
aes(y = kwh_total, x = dollars)) +
geom_point() +
labs(x = "Money Paid",
y = "Total Energy",
title = "Relationship between average price and total volume") +
geom_smooth(method = "lm", se = FALSE) +
theme_classic()
summary(ev_charging)
summary(ev_charging %>% filter(dollars>0))
summary(ev_charging %>% filter(dollars>0.5))
ggplot(ev_charging %>% filter(dollars>0.5),
aes(y = kwh_total, x = dollars)) +
geom_point() +
labs(x = "Money Paid",
y = "Total Energy",
title = "Relationship between average price and total volume") +
geom_smooth(method = "lm", se = FALSE) +
theme_classic()
ev_chp10 <- ev_charging %>%
select(kwh_total,dollars) %>%
filter(dollars>0.5)
glimpse(ev_chp10)
ggplot(ev_chp10,
aes(y = kwh_total, x = dollars)) +
geom_point() +
labs(x = "Money Paid",
y = "Total Energy",
title = "Relationship between money paid for charging session and total energy used") +
geom_smooth(method = "lm", se = FALSE) +
theme_classic()
# Fit regression model:
score_model <- lm(kwh_total ~ dollars, data = ev_chp10)
# Fit regression model:
ev_model <- lm(kwh_total ~ dollars, data = ev_chp10)
# Get regression table:
get_regression_table(ev_model)
library(knitr)
library(kableExtra)
knitr::opts_chunk$set(echo = TRUE)
score_regression_points <- get_regression_points(score_model)
library(tidyverse)
library(infer)
library(moderndive)
evals_ch5 <- evals %>%
select(ID, score, bty_avg, age)
glimpse(evals_ch5)
score_model <- lm(score ~ bty_avg, data = evals_ch5)
score_regression_points <- get_regression_points(score_model)
head(score_regression_points)
plot(score_model)
?geom_smooth
ggplot(evals_ch5,
aes(x = bty_avg, y = score)) +
geom_point() +
labs(x = "Beauty Score",
y = "Teaching Score",
title = "Relationship between teaching and beauty scores") +
geom_smooth(method = "lm", se = FALSE, color="black") +
geom_smooth(method="loess", se=FALSE) +
theme_classic()
ggplot(evals_ch5,
aes(x = bty_avg, y = score)) +
geom_point() +
labs(x = "Beauty Score",
y = "Teaching Score",
title = "Relationship between teaching and beauty scores") +
geom_smooth(method = "lm", se = FALSE, color="black") +
geom_smooth(method="loess", se=FALSE) +
theme_classic()
ggplot(score_regression_points,
aes(x = score_hat, y = residual)) +
geom_point() +
labs(x = "Fitted Value",
y = "Residual",
title = "Checking linearity assumption") +
geom_smooth(method = "lm", se = FALSE, color="black") +
geom_smooth(method="loess", se=FALSE) +
theme_classic()
gplot(regression_points, aes(x = residual)) +
geom_histogram(binwidth = 0.25, fill = "cyan", color="black") +
labs(x = "Residual") =
theme_classic()
gplot(score_regression_points, aes(x = residual)) +
geom_histogram(binwidth = 0.25, fill = "cyan", color="black") +
labs(x = "Residual") =
theme_classic()
ggplot(score_regression_points, aes(x = residual)) +
geom_histogram(binwidth = 0.25, fill = "cyan", color="black") +
labs(x = "Residual") =
theme_classic()
ggplot(score_regression_points, aes(x = residual)) +
geom_histogram(binwidth = 0.25, fill = "cyan", color="black") +
labs(x = "Residual") +
theme_classic()
ggplot(score_regression_points, aes(x = bty_avg, y = residual)) +
geom_point() +
labs(x = "Beauty Score", y = "Residual") +
geom_hline(yintercept = 0, col = "blue", size = 1)
ggplot(regression_points, aes(x = residual)) +
geom_histogram(binwidth = 0.25, color = "black", fill = "cyan") +
labs(x = "Residual") +
theme_classic()
library(tidyverse)
library(moderndive)
library(infer)
library(palmerpenguins)
ggplot(data = pen, aes(y = body_mass_g, x = flipper_length_mm)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Flipper length (millimeters)",
y = "Body mass (grams)",
title = "Flipper Length and Body Mass of Three Species of Penguins")
pen <-penguins  %>%
filter(!is.na(flipper_length_mm))
ggplot(data = pen, aes(y = body_mass_g, x = flipper_length_mm)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Flipper length (millimeters)",
y = "Body mass (grams)",
title = "Flipper Length and Body Mass of Three Species of Penguins")
pen_model <- lm(body_mass_g ~ flipper_length_mm, data = pen)
get_regression_table(pen_model)
ggplot(regression_points, aes(x = residual)) +
geom_histogram(binwidth = 150, color = "white") +
labs(x = "Residual")
regression_points <- get_regression_points(pen_model)
ggplot(regression_points, aes(x = residual)) +
geom_histogram(binwidth = 150, color = "white") +
labs(x = "Residual")
ggplot(regression_points, aes(x = residual)) +
geom_histogram(binwidth = 150, color = "black", fill="cyan") +
labs(x = "Residual") +
theme_classic()
ggplot(regression_points, aes(x = flipper_length_mm, y = residual)) +
geom_point() +
labs(x = "Flipper length in mm ", y = "Residual") +
geom_hline(yintercept = 0, col = "blue", size = 1) +
theme_classic()
set.seed(126)
bootstrap_distn_slope <- pen %>%
specify(formula = body_mass_g ~ flipper_length_mm) %>%
generate(reps = 1000, type = "bootstrap") %>%
calculate(stat = "slope")
visualize(bootstrap_distn_slope)
bootstrap_distn_slope %>%
summarize(lower_ci = quantile(stat, 0.025),
upper_ci = quantile(stat, 0.975))
bootstrap_distn_slope %>%
get_ci(type="percentile")
ggplot(data = pen, aes(y = body_mass_g, x = bill_length_mm, color=species)) +
geom_point() +
geom_parallel_slopes(method = "lm", se = FALSE) +
labs(x = "Bill length (millimeters)",
y = "Body mass (grams)",
title = "Bill Length and Body Mass of three Species of Penguins")
# Fit regression model:
pen_parallel <- lm(body_mass_g ~ bill_length_mm + species, data = pen)
# Get regression table:
get_regression_table(pen_parallel)
# Get regression points:
regression_points_par <- get_regression_points(pen_parallel)
ggplot(data = pen, aes(y = body_mass_g, x = bill_length_mm, color=species)) +
geom_point() +
geom_parallel_slopes(method = "lm", se = FALSE) +
labs(x = "Bill length (millimeters)",
y = "Body mass (grams)",
title = "Bill Length and Body Mass of three Species of Penguins")
#Add code for the histogram:
ggplot(regression_points_par, aes(x = residual)) +
geom_histogram(binwidth = 150, color = "black", fill = "cyan") +
labs(x = "Residual") +
theme_classic()
#Add code to check this condition:
ggplot(regression_points_par, aes(x = bill_length_mm, y = residual, color =species)) +
geom_point() +
labs(x = "bill Length in mm ", y = "Residual") +
geom_hline(yintercept = 0, col = "blue", size = 1)
#Add code to check this condition:
ggplot(regression_points_par, aes(x = bill_length_mm, y = residual, color =species)) +
geom_point() +
labs(x = "bill Length in mm ", y = "Residual") +
geom_hline(yintercept = 0, col = "blue", size = 1) +
theme_classic()
library(knitr)
library(kableExtra)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(infer)
library(moderndive)
evals_ch5 <- evals %>%
select(ID, score, bty_avg, age)
glimpse(evals_ch5)
score_model <- lm(score ~ bty_avg, data = evals_ch5)
get_regression_table(score_model)
null_distn_slope <- evals %>%
specify(score ~ bty_avg) %>%
hypothesize(null = "independence") %>%
generate(reps = 1000, type = "permute") %>%
calculate(stat = "slope")
visualize(null_distn_slope)
(observed_slope <- evals %>%
specify(score ~ bty_avg) %>%
calculate(stat = "slope"))
visualize(null_distn_slope) %>%
shade_p_value(obs_stat = observed_slope, direction = "both")
visualize(null_distn_slope) +
shade_p_value(obs_stat = observed_slope, direction = "both")
null_distn_slope %>%
get_p_value(obs_stat = observed_slope, direction = "both")
set.seed(839)
bootstrap_distn_slope <- evals_ch5 %>%
specify(formula = score ~ bty_avg) %>%
generate(reps = 1000, type = "bootstrap") %>%
calculate(stat = "correlation")
set.seed(839)
bootstrap_distn_slope <- evals_ch5 %>%
specify(formula = score ~ bty_avg) %>%
generate(reps = 1000, type = "bootstrap") %>%
calculate(stat = "correlation")
set.seed(839)
bootstrap_distn_corr <- evals_ch5 %>%
specify(formula = score ~ bty_avg) %>%
generate(reps = 1000, type = "bootstrap") %>%
calculate(stat = "correlation")
percentile_ci <- bootstrap_distn_corr %>%
get_confidence_interval(type = "percentile", level = 0.95)
percentile_ci
(observed_corr <- evals %>%
specify(score ~ bty_avg) %>%
calculate(stat = "correlation"))
?get_confidence_interval
bootstrap_distn_corr %>%
get_confidence_interval(point_estimate = observed_corr, type = "se", level = 0.95)
(std_err<-bootstrap_distn_corr %>%
get_confidence_interval(point_estimate = observed_corr, type = "se", level = 0.95))
visualize(bootstrap_distn_corr)
visualize(bootstrap_distn_corr) +
theme_classic()
set.seed(2001)
null_distn_corr <- evals %>%
specify(score ~ bty_avg) %>%
hypothesize(null = "independence") %>%
generate(reps = 1000, type = "permute") %>%
calculate(stat = "correlation")
visualize(null_distn_corr)
visualize(null_distn_corr) +
shade_p_value(obs_stat = observed_corr, direction = "both")
null_distn_corr %>%
get_p_value(obs_stat = observed_corr, direction = "both")
