ungroup() %>%
mutate(prop = count / sum(count))
mythbusters_yawn %>%
group_by(group, yawn) %>%
summarize(count = n()) %>%
mutate(prop = count / sum(count))
?generate
mythbusters_yawn %>%
specify(formula = yawn ~ group)
mythbusters_yawn %>%
specify(formula = yawn ~ group,success="yes")
mythbusters_yawn %>%
specify(formula = yawn ~ group,success="yes") %>%
generate(reps = 1, type = "bootstrap")
mythbusters_yawn %>%
specify(formula = yawn ~ group,success="yes") %>%
generate(reps = 1, type = "bootstrap") %>%
summarize(count = n()) %>%
mutate(prop = count / sum(count))
set.seed(77)
mythbusters_yawn %>%
specify(formula = yawn ~ group,success="yes") %>%
generate(reps = 1, type = "bootstrap")
set.seed(77)
mythbusters_yawn %>%
specify(formula = yawn ~ group,success="yes") %>%
generate(reps = 1, type = "bootstrap") %>%
group_by(group, yawn) %>%
summarize(count = n()) %>%
mutate(prop = count / sum(count))
?rep_sample_n
bootstrap_distribution_yawning <- mythbusters_yawn %>%
specify(formula = yawn ~ group, success = "yes") %>%
generate(reps = 1000, type = "bootstrap") %>%
calculate(stat = "diff in props", order = c("seed", "control"))
head(bootstrap_distribution_yawning)
visualize(bootstrap_distribution_yawning)
get_ci(bootstrap_distribution_yawning,type="percentile")
24/34-4/16
24/34-12/16
10/34-4/16
head(bootstrap_distribution_yawning)
bootstrap_distribution_yawning %>%
summarize(ave=mean(stat))
bootstrap_distribution_yawning %>%
summarize(ave=median(stat))
bootstrap_distribution_yawning %>%
summarize(ave=mean(stat))
head(mythbusters_yawn)
bowl_sample_1
bowl_sample_1 %>%
summarize(prop=mean(color=="red"))
bowl_sample_1 %>%
summarize(prop=mean(color=="red"),total=n())
bowl_sample_1 %>%
summarize(prop=mean(color=="red"),total=n()) %>%
mutate(lower_ci=prop-qnorm(.975)*sqrt(prop*(1-prop)/total))
bowl_sample_1 %>%
summarize(prop=mean(color=="red"),total=n()) %>%
mutate(lower_ci=prop-qnorm(.975)*sqrt(prop*(1-prop)/total),
upper_ci=prop+qnorm(.975)*sqrt(prop*(1-prop)/total))
?generate
?calculate
set.seed(45678)
bootstrap_dist<-bowl_sample_1 %>%
specify(color~NULL,success="red") %>%
generate(reps=1000,type="bootstrap") %>%
calculate(stat="prop")
get_ci(bootstrap_dist,type="percentile")
get_ci(bootstrap_dist,type="se",point_estimate = .42)
install.packages("ggplot2movies")
library(knitr)
library(kableExtra)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(infer)
library(moderndive)
library(nycflights13)
library(ggplot2movies)
promotions
promotions %>%
group_by(decision, male) %>%
tally()
promotions %>%
group_by(decision, gender) %>%
tally()
promotions %>%
group_by(gender, decision) %>%
tally()
promotions %>%
group_by(gender, decision) %>%
tally() %>%
mutate(prop = n / sum(n))
promotions %>%
group_by(gender, decision) %>%
tally() %>%
mutate(perc = n / sum(n)*100)
promotions %>%
group_by(gender, decision) %>%
tally() %>%
mutate(perc = round(n / sum(n)*100),2)
promotions %>%
group_by(gender, decision) %>%
tally() %>%
mutate(perc = round(n / sum(n)*100,2))
ggplot(promotions, aes(x = gender, fill = decision)) +
geom_bar(position="fill") +
labs(x = "Gender of name on résumé")
ggplot(promotions, aes(x = gender, fill = decision)) +
geom_bar(position="fill") +
labs(x = "Gender of name on résumé",y="Proportion")
set.seed(612)
bootstrap_distribution_promotions <- promotions %>%
specify(formula = decision ~ gender, success = "promoted") %>%
generate(reps = 1000, type = "bootstrap") %>%
calculate(stat = "diff in props", order = c("male", "female"))
head(bootstrap_distribution_promotions)
visualize(bootstrap_distribution_promotions)
visualize(bootstrap_distribution_promotions) +
geom_vline(xintercept = 0)
?get_ci
get_ci(level=0.90,bootstrap_distribution_promotions,type="percentile")
?sample
head(promotions)
promotions %>%
mutate(shuffled=sample(gender))
set.seed(27)
promotions %>%
mutate(shuffled=sample(gender))
set.seed(27)
promotions_mod <- promotions %>%
mutate(shuffled=sample(gender))
head(promotions_mod)
promotions %>%
group_by(shuffled, decision) %>%
tally()
promotions_mod %>%
group_by(shuffled, decision) %>%
tally()
set.seed(272)
promotions_mod <- promotions %>%
mutate(shuffled=sample(gender))
head(promotions_mod)
promotions_mod %>%
group_by(shuffled, decision) %>%
tally()
promotions_mod %>%
group_by(shuffled, decision) %>%
tally()  %>%
mutate(perc = round(n / sum(n)*100,2))
promotions_mod %>%
group_by(shuffled, decision) %>%
tally()  %>%
mutate(perc = round(n / sum(n)*100,2))
promotions_mod %>%
group_by(shuffled, decision) %>%
tally()  %>%
mutate(perc = round(n / sum(n)*100,2)) %>%
filter(decision=="promoted")
promotions_mod %>%
group_by(shuffled, decision) %>%
tally()  %>%
mutate(perc = round(n / sum(n)*100,2)) %>%
filter(decision=="promoted") %>%
pull(perc)
promotions_mod %>%
group_by(shuffled, decision) %>%
tally()  %>%
mutate(perc = round(n / sum(n)*100,2)) %>%
filter(decision=="promoted") %>%
pull(perc) %>%
diff()
library(readr)
gender_promotions_shuffles <- read_csv("NTI/Block 4/ch9_gender_promotions_results - 16 shuffles.csv")
View(gender_promotions_shuffles)
gender_promotions_shuffles <- read_csv("ch9_gender_promotions_shuffles")
gender_promotions_shuffles <- read_csv("ch9_gender_promotions_shuffles.csv")
gender_promotions_shuffles <- read_csv("ch9_gender_promotions_shuffles.csv")
head(gender_promotions_shuffles)
?pivot_longer
gender_promotions_shuffles %>%
pivot_longer(names_to = "team", values_to = "gender" , -c(id, decision)) %>%
mutate(replicate = rep(1:n_replicates, each = 48))
gender_promotions_shuffles %>%
pivot_longer(names_to = "team", values_to = "gender" , -c(id, decision))
gender_promotions_shuffles %>%
pivot_longer(names_to = "team", values_to = "gender" , -c(id, decision)) %>%
mutate(replicate = rep(1:16, each = 48))
?gather
gender_promotions_shuffles  <- gender_promotions_shuffles %>%
pivot_longer(names_to = "team", values_to = "gender" , -c(id, decision)) %>%
mutate(replicate = rep(1:16, each = 48))
gender_promotions_shuffles <- read_csv("ch9_gender_promotions_shuffles.csv")
head(gender_promotions_shuffles)
shuffled_data_tidy  <- gender_promotions_shuffles %>%
pivot_longer(names_to = "team", values_to = "gender" , -c(id, decision)) %>%
mutate(replicate = rep(1:16, each = 48))
shuffled_data_tidy %>% group_by(replicate) %>% count(gender)
gender_promotions_shuffles %>%
gather(key = "team", value = "gender" , -c(id, decision)) %>%
mutate(replicate = rep(1:16, each = 48))
?rep
gender_promotions_shuffles %>%
gather(key = "team", value = "gender" , -c(id, decision)) %>%
mutate(replicate = rep(1:16, each = 48))
gender_promotions_shuffles %>%
gather(key = "team", value = "gender" , -c(id, decision)) %>%
mutate(replicate = rep(1:16, each = 48)) %>% group_by(replicate) %>% count(gender)
gender_promotions_shuffles %>%
gather(key = "team", value = "gender" , -c(id, decision)) %>%
mutate(replicate = rep(1:16, each = 48))
gender_promotions_shuffles %>%
pivot_longer(cols=-c(id, decision),names_to = "team", value_to = "gender") %>%
mutate(replicate = rep(1:16, each = 48))
gender_promotions_shuffles %>%
pivot_longer(cols=-c("id", "decision"),
names_to = "team", value_to = "gender") %>%
mutate(replicate = rep(1:16, each = 48))
gender_promotions_shuffles %>%
pivot_longer(cols=-c("id", "decision"),
names_to = "team", values_to = "gender") %>%
mutate(replicate = rep(1:16, each = 48))
gender_promotions_shuffles %>%
pivot_longer(cols=-c("id", "decision"),
names_to = "team", values_to = "gender") %>%
mutate(replicate = rep(1:16, times = 48))
gender_promotions_shuffles %>%
pivot_longer(cols=-c("id", "decision"),
names_to = "team", values_to = "gender") %>%
mutate(replicate = rep(1:16, times = 48)) %>% group_by(replicate) %>% count(gender)
shuffled_data_tidy  <- gender_promotions_shuffles %>%
pivot_longer(cols=-c("id", "decision"),
names_to = "team", values_to = "gender") %>%
mutate(replicate = rep(1:16, times = 48))
shuffled_data_tidy %>% group_by(replicate) %>% count(gender)
shuffled_data_tidy %>%
group_by(replicate) %>%
count(gender, decision) %>%
filter(decision == "promoted") %>%
mutate(prop = n / 24) %>%
select(replicate, gender, prop) %>%
spread(gender, prop) %>%
mutate(stat = m - f)
head(shuffled_data_tidy,n=17)
shuffled_data_tidy %>% group_by(replicate) %>% count(gender)
shuffled_data_tidy %>%
group_by(replicate) %>%
count(gender, decision)
shuffled_data_tidy %>%
group_by(replicate) %>%
count(gender, decision) %>%
filter(decision == "promoted") %>%
mutate(prop = n / 24)
shuffled_data_tidy %>%
group_by(replicate) %>%
count(gender, decision) %>%
filter(decision == "promoted") %>%
mutate(prop = n / 24) %>%
select(replicate, gender, prop)
?pivot_wider
shuffled_data_tidy %>%
group_by(replicate) %>%
count(gender, decision) %>%
filter(decision == "promoted") %>%
mutate(prop = n / 24) %>%
select(replicate, gender, prop) %>%
pivot_wider(names_from="gender",values_from = prop)
shuffled_data_tidy %>%
group_by(replicate) %>%
count(gender, decision) %>%
filter(decision == "promoted") %>%
mutate(prop = n / 24) %>%
select(replicate, gender, prop)
shuffled_data_tidy %>%
group_by(replicate) %>%
count(gender, decision) %>%
filter(decision == "promoted") %>%
mutate(prop = n / 24) %>%
select(replicate, gender, prop) %>%
pivot_wider(names_from="gender",values_from = prop)
shuffled_data_tidy %>%
group_by(replicate) %>%
count(gender, decision) %>%
filter(decision == "promoted") %>%
mutate(prop = n / 24) %>%
select(replicate, gender, prop) %>%
pivot_wider(names_from="gender",values_from = prop) %>%
mutate(stat = m - f)
test_stats <- shuffled_data_tidy %>%
group_by(replicate) %>%
count(gender, decision) %>%
filter(decision == "promoted") %>%
mutate(prop = n / 24) %>%
select(replicate, gender, prop) %>%
pivot_wider(names_from="gender",values_from = prop) %>%
mutate(stat = m - f)
head(test_stats)
gplot(data = test_stats, aes(x = stat)) +
geom_histogram(binwidth = 0.1, fill = "cyan") +
geom_vline(xintercept = observed_test_statistic, color = "red", size = 1) +
labs(x = "Difference in promotion rates (male - female)")
ggplot(data = test_stats, aes(x = stat)) +
geom_histogram(binwidth = 0.1, fill = "cyan") +
geom_vline(xintercept = observed_test_statistic, color = "red", size = 1) +
labs(x = "Difference in promotion rates (male - female)")
ggplot(data = test_stats, aes(x = stat)) +
geom_histogram(binwidth = 0.1, fill = "cyan") +
geom_vline(xintercept = (21/24 -14/24 ), color = "red", size = 1) +
labs(x = "Difference in promotion rates (male - female)")
ggplot(data = test_stats, aes(x = stat)) +
geom_histogram(binwidth = 0.1, fill = "cyan", color = "black") +
geom_vline(xintercept = (21/24 -14/24 ), color = "red", size = 1) +
labs(x = "Difference in promotion rates (male - female)")
library(knitr)
library(kableExtra)
knitr::opts_chunk$set(echo = TRUE)
head(promotions)
library(tidyverse)
library(infer)
library(moderndive)
library(nycflights13)
library(ggplot2movies)
head(promotions)
?hypothesise
?calculate
null_dist <- promotions %>%
specify(formulat=decision~gender,success = "promoted") %>%
hypothesise(null="independence") %>%
generate(reps = 1000, type = "permute") %>%
calculate(stat="diff in props",order=c("male","female"))
null_dist <- promotions %>%
specify(formula=decision~gender,success = "promoted") %>%
hypothesise(null="independence") %>%
generate(reps = 1000, type = "permute") %>%
calculate(stat="diff in props",order=c("male","female"))
visualise(null_dist)
visualise(null_dist,bins=10)
obs_value <- promotions %>%
specify(formula=decision~gender,success = "promoted") %>%
calculate(stat="diff in props",order=c("male","female"))
null_distribution %>%
get_p_value(obs_stat = obs_diff_prop, direction = "right")
null_dist %>%
get_p_value(obs_stat = obs_diff_prop, direction = "right")
null_dist %>%
get_p_value(obs_stat = obs_value, direction = "right")
boot_dist <- promotions %>%
specify(formula=decision~gender,success = "promoted") %>%
#  hypothesise(null="independence") %>%
generate(reps = 1000, type = "bootstrap") %>%
calculate(stat="diff in props",order=c("male","female"))
get_ci(boot_dist,type="percentile")
library(knitr)
library(kableExtra)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(infer)
library(moderndive)
library(ggplot2movies)
set.seed(2511)
# In calculate() step replace "diff in means" with "diff in medians"
null_distribution_movies_median <- movies_sample %>%
specify(formula = rating ~ genre) %>%
hypothesize(null = "independence") %>%
generate(reps = 1000, type = "permute") %>%
calculate(stat = "diff in medians", order = c("Action", "Romance"))
# compute observed "diff in medians"
obs_diff_medians <- movies_sample %>%
specify(formula = rating ~ genre) %>%
calculate(stat = "diff in medians", order = c("Action", "Romance"))
obs_diff_medians
# Visualize p-value. Observing this difference in medians under H0
# is very unlikely! Suggesting H0 is false, similarly to when we used
# "diff in means" as the test statistic.
visualize(null_distribution_movies_median, bins = 10) +
shade_p_value(obs_stat = obs_diff_medians, direction = "both")
# p-value is very small, just like when we used "diff in means"
# as the test statistic.
null_distribution_movies_median %>%
get_p_value(obs_stat = obs_diff_medians, direction = "both")
?facet_grid
?facet_wrap
ggplot(data = movies_sample, aes(x = rating)) +
geom_histogram() +
facet_wrap(vars(genre))+
labs(y = "IMDb rating")
ggplot(data = movies_sample, aes(x = rating)) +
geom_histogram(bins=5) +
facet_wrap(vars(genre))+
labs(y = "IMDb rating")
ggplot(data = movies_sample, aes(x = rating)) +
geom_histogram(bins=7) +
facet_wrap(vars(genre))+
labs(y = "IMDb rating")
ggplot(data = movies_sample, aes(x = rating)) +
geom_histogram(bins=10) +
facet_wrap(vars(genre))+
labs(y = "IMDb rating")
ggplot(data = movies_sample, aes(x = rating)) +
geom_histogram(bins=8) +
facet_wrap(vars(genre))+
labs(y = "IMDb rating")
ggplot(data = movies_sample, aes(x = rating)) +
geom_histogram(bins=8) +
facet_wrap(vars(genre))+
labs(x = "IMDb rating")
ggplot(data = movies_sample, aes(x = rating)) +
geom_density() +
facet_wrap(vars(genre))+
labs(x = "IMDb rating")
ggplot(data = movies_sample, aes(x = rating)) +
geom_density() +
facet_wrap(vars(genre))+
labs(x = "IMDb rating") +
theme_classic()
ggplot(data = movies_sample, aes(x = rating)) +
geom_density() +
facet_wrap(vars(genre))+
labs(x = "IMDb rating") +
theme_classic(fill="cyan")
ggplot(data = movies_sample, aes(x = rating)) +
geom_density(fill="cyan") +
facet_wrap(vars(genre))+
labs(x = "IMDb rating") +
theme_classic()
action_romance <- movies %>%
filter(Action == 1 & Romance == 1)
ggplot(action_romance, aes(rating)) +
geom_histogram() +
facet_wrap(~Action)
head(action_romance)
action_romance <- movies %>%
select(title,year,rating,votes,Action,Romance)
action_romance <- movies %>%
head(action_romance)
action_romance <- movies %>%
select(title,year,rating,votes,Action,Romance) %>%
# Get rid of movies that are both
filter(!(Action == 1 & Romance == 1)) %>%
filter(Action == 1 | Romance == 1)
head(action_romance)
action_romance <- movies %>%
select(title,year,rating,votes,Action,Romance) %>%
# Get rid of movies that are both
filter(!(Action == 1 & Romance == 1)) %>%
filter(Action == 1 | Romance == 1) %>%
mutate(genre = case_when(
Action == 1 ~ "Action",
Romance == 1 ~ "Romance",
TRUE ~ "Neither"
))
head(action_romance)
action_romance <- movies %>%
select(title,year,rating,votes,Action,Romance) %>%
# Get rid of movies that are both
filter(!(Action == 1 & Romance == 1)) %>%
filter(Action == 1 | Romance == 1) %>%
mutate(genre = case_when(
Action == 1 ~ "Action",
Romance == 1 ~ "Romance",
TRUE ~ "Neither"
)) %>%
select(-Action,-Romance)
head(action_romance)
action_sample %>%
group_by(genre) %>%
summarize(n = n(), mean_rating = mean(rating), std_dev = sd(rating))
action_romance %>%
group_by(genre) %>%
summarize(n = n(), mean_rating = mean(rating), std_dev = sd(rating))
ggplot(data = movies_sample, aes(x = rating)) +
geom_density(fill="cyan") +
facet_wrap(~genre)+
labs(x = "IMDb rating") +
theme_classic()
ggplot(data = movies_sample, aes(x = rating)) +
geom_histogram(bins=8) +
facet_wrap(~genre)+
labs(x = "IMDb rating")
ggplot(data = action_romance, aes(x = rating)) +
geom_histogram(bins=8) +
facet_wrap(~genre)+
labs(x = "IMDb rating")
ggplot(data = action_romance, aes(x = rating)) +
geom_density() +
facet_wrap(~genre)+
labs(x = "IMDb rating")
ggplot(data = action_romance, aes(x = rating)) +
geom_density() +
facet_wrap(~genre)+
labs(x = "IMDb rating") +
theme_classic()
ggplot(data = action_romance, aes(x = genre,y=rating)) +
geom_boxplot() +
labs(y = "IMDb rating")
ggplot(data = action_romance, aes(x = genre,y=rating)) +
geom_boxplot() +
labs(y = "IMDb rating") +
theme_classic()
set.seed(2511)
# In calculate() step replace "diff in means" with "diff in medians"
boot_distribution_movies_median <- movies_sample %>%
specify(formula = rating ~ genre) %>%
#  hypothesize(null = "independence") %>%
generate(reps = 1000, type = "bootstrap") %>%
calculate(stat = "diff in medians", order = c("Action", "Romance"))
visualize(null_distribution_movies_median, bins = 10)
visualize(boot_distribution_movies_median, bins = 10)
boot_distribution_movies_median %>%
get_ci(type="percentile")
boot_distribution_movies_median %>%
get_ci(level=.999,type="percentile")
